part of '../tdapi.dart';

class LocalFile extends TdObject {

  /// Represents a local file
  LocalFile({this.path,
    this.canBeDownloaded,
    this.canBeDeleted,
    this.isDownloadingActive,
    this.isDownloadingCompleted,
    this.downloadOffset,
    this.downloadedPrefixSize,
    this.downloadedSize});

  /// [path] Local path to the locally available file part; may be empty
  String? path;

  /// [canBeDownloaded] True, if it is possible to try to download or generate the file
  bool? canBeDownloaded;

  /// [canBeDeleted] True, if the file can be deleted
  bool? canBeDeleted;

  /// [isDownloadingActive] True, if the file is currently being downloaded (or a local copy is being generated by some other means)
  bool? isDownloadingActive;

  /// [isDownloadingCompleted] True, if the local copy is fully available
  bool? isDownloadingCompleted;

  /// [downloadOffset] Download will be started from this offset. downloaded_prefix_size is calculated from this offset
  int? downloadOffset;

  /// [downloadedPrefixSize] If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix in bytes
  int? downloadedPrefixSize;

  /// [downloadedSize] Total downloaded file size, in bytes. Can be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage
  int? downloadedSize;

  /// Parse from a json
  LocalFile.fromJson(Map<String, dynamic> json)  {
    String? pre_path;
    try{
      pre_path=json['path'];
   }catch(_){}
    path = pre_path;
    bool? pre_canBeDownloaded;
    try{
      pre_canBeDownloaded=json['can_be_downloaded'];
   }catch(_){}
    canBeDownloaded = pre_canBeDownloaded;
    bool? pre_canBeDeleted;
    try{
      pre_canBeDeleted=json['can_be_deleted'];
   }catch(_){}
    canBeDeleted = pre_canBeDeleted;
    bool? pre_isDownloadingActive;
    try{
      pre_isDownloadingActive=json['is_downloading_active'];
   }catch(_){}
    isDownloadingActive = pre_isDownloadingActive;
    bool? pre_isDownloadingCompleted;
    try{
      pre_isDownloadingCompleted=json['is_downloading_completed'];
   }catch(_){}
    isDownloadingCompleted = pre_isDownloadingCompleted;
    int? pre_downloadOffset;
    try{
      pre_downloadOffset=json['download_offset'];
   }catch(_){}
    downloadOffset = pre_downloadOffset;
    int? pre_downloadedPrefixSize;
    try{
      pre_downloadedPrefixSize=json['downloaded_prefix_size'];
   }catch(_){}
    downloadedPrefixSize = pre_downloadedPrefixSize;
    int? pre_downloadedSize;
    try{
      pre_downloadedSize=json['downloaded_size'];
   }catch(_){}
    downloadedSize = pre_downloadedSize;
  }

  @override
  Map<String, dynamic> toJson() {
    return {
      "@type": CONSTRUCTOR,
      "path": path,
      "can_be_downloaded": canBeDownloaded,
      "can_be_deleted": canBeDeleted,
      "is_downloading_active": isDownloadingActive,
      "is_downloading_completed": isDownloadingCompleted,
      "download_offset": downloadOffset,
      "downloaded_prefix_size": downloadedPrefixSize,
      "downloaded_size": downloadedSize,
    };
  }

  static const CONSTRUCTOR = 'localFile';
  
  @override
  String getConstructor() => CONSTRUCTOR;
}