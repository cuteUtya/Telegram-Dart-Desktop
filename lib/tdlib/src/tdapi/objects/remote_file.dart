part of '../tdapi.dart';

class RemoteFile extends TdObject {

  /// Represents a remote file
  RemoteFile({this.id,
    this.uniqueId,
    this.isUploadingActive,
    this.isUploadingCompleted,
    this.uploadedSize});

  /// [id] Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers.. If the remoteFile starts with "http://" or "https://", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known.. If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the application with the HTTP URL in the original_path and "#url#" as the conversion string. Application must generate the file by downloading it to the specified location
  String? id;

  /// [uniqueId] Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time
  String? uniqueId;

  /// [isUploadingActive] True, if the file is currently being uploaded (or a remote copy is being generated by some other means)
  bool? isUploadingActive;

  /// [isUploadingCompleted] True, if a remote copy is fully available
  bool? isUploadingCompleted;

  /// [uploadedSize] Size of the remote available part of the file, in bytes; 0 if unknown
  int? uploadedSize;

  /// Parse from a json
  RemoteFile.fromJson(Map<String, dynamic> json)  {
    String? pre_id;
    try{
      pre_id=json['id'];
   }catch(_){}
    id = pre_id;
    String? pre_uniqueId;
    try{
      pre_uniqueId=json['unique_id'];
   }catch(_){}
    uniqueId = pre_uniqueId;
    bool? pre_isUploadingActive;
    try{
      pre_isUploadingActive=json['is_uploading_active'];
   }catch(_){}
    isUploadingActive = pre_isUploadingActive;
    bool? pre_isUploadingCompleted;
    try{
      pre_isUploadingCompleted=json['is_uploading_completed'];
   }catch(_){}
    isUploadingCompleted = pre_isUploadingCompleted;
    int? pre_uploadedSize;
    try{
      pre_uploadedSize=json['uploaded_size'];
   }catch(_){}
    uploadedSize = pre_uploadedSize;
  }

  @override
  Map<String, dynamic> toJson() {
    return {
      "@type": CONSTRUCTOR,
      "id": id,
      "unique_id": uniqueId,
      "is_uploading_active": isUploadingActive,
      "is_uploading_completed": isUploadingCompleted,
      "uploaded_size": uploadedSize,
    };
  }

  static const CONSTRUCTOR = 'remoteFile';
  
  @override
  String getConstructor() => CONSTRUCTOR;
}